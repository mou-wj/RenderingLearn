#version 460
#extension GL_EXT_ray_tracing : require

// 光线有效载荷（用于存储光线追踪的结果）
struct RayPayload {
    vec3 color;
};


// 顶层加速结构
layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

// 输出图像
layout(binding = 1, set = 0, rgba8) uniform image2D outputImage;

// 光线追踪参数
layout(location = 0) rayPayloadEXT RayPayload payload;
layout(location = 1) callableDataEXT float callableData;

void main() {
    // 获取当前像素的坐标
    ivec2 pixelCoords = ivec2(gl_LaunchIDEXT.xy);
    ivec2 imageSize = imageSize(outputImage);

    // 初始化光线有效载荷
    payload.color = vec3(0.0, 0.0, 0.0);

    // 计算光线方向（从相机发射到像素）
    vec2 uv = vec2(pixelCoords) / vec2(imageSize);
    uv = uv * 2.0 - 1.0; // 将 UV 坐标从 [0, 1] 映射到 [-1, 1]
    vec3 rayOrigin = vec3(0.0, 0.0, -5.0); // 相机位置
    vec3 rayDirection = normalize(vec3(uv, 1.0)); // 光线方向

    // 定义光线的参数
    float tMin = 0.001; // 光线的最小距离
    float tMax = 1000.0; // 光线的最大距离
    uint rayFlags = gl_RayFlagsNoneEXT; // 光线标志
    uint cullMask = 0xFF; // 剔除掩码
    uint sbtRecordOffset = 0; // 着色器绑定表偏移
    uint sbtRecordStride = 1; // 着色器绑定表步长
    uint missIndex = 0; // 未命中着色器索引

    // 发射光线
    traceRayEXT(
        topLevelAS,        // 顶层加速结构
        rayFlags,          // 光线标志
        cullMask,          // 剔除掩码
        sbtRecordOffset,   // 着色器绑定表偏移
        sbtRecordStride,   // 着色器绑定表步长
        missIndex,         // 未命中着色器索引
        rayOrigin,         // 光线起点
        tMin,             // 光线最小距离
        rayDirection,      // 光线方向
        tMax,             // 光线最大距离
        0                 // 有效载荷索引
    );

    // 将结果写入输出图像
    imageStore(outputImage, pixelCoords, vec4(payload.color, 1.0));
}